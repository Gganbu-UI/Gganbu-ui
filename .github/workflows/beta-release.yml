# .github/workflows/beta-release.yml
name: 🚀 Beta Release

on:
  push:
    branches:
      - release/**
      - hotfix/**

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check-changesets:
    runs-on: ubuntu-latest
    name: Check for changes in .changesets
    outputs:
      any_changed: ${{ steps.check_changesets.outputs.any_changed }}
      any_deleted: ${{ steps.check_changesets.outputs.any_deleted }}
      mode: ${{ steps.get_changeset_mode.outputs.mode }}
      length: ${{ steps.get_changeset_mode.outputs.length }}
      diff: ${{ steps.get_changeset_mode.outputs.diff }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check .changesets directory for changes
        id: check_changesets
        uses: tj-actions/changed-files@v44
        with:
          files: |
            .changeset/**
      - name: Check changeset mode(pre or exit)
        id: get_changeset_mode
        run: |
          MODE=$(cat .changeset/pre.json | jq -r '.mode')
          echo "mode=$MODE" >> $GITHUB_OUTPUT
          echo "mode=$MODE"
      - name: Check Changesets length
        id: get_changesets_length
        run: |
          CHANGESETS_LENGTH=$(cat .changeset/pre.json | jq -r '.changesets | length')
          echo "length=$CHANGESETS_LENGTH" >> $GITHUB_OUTPUT
          echo "length=$CHANGESETS_LENGTH"
      - name: Check Changesets diff
        id: check_changesets_diff
        run: |
          # Get the diff for the pre.json file
          DIFF=$(git diff HEAD^ HEAD -- .changeset/pre.json)

          # Check if the changesets field has changed
          if echo "$DIFF" | grep -q '"changesets"'; then
            echo "Changesets have changed."
            echo "diff=true" >> $GITHUB_ENV
          else
            echo "No changes in changesets."
            echo "diff=false" >> $GITHUB_ENV
          fi

  changesets-release:
    name: Release packages with changesets
    runs-on: ubuntu-latest
    needs: [check-changesets]
    if: ${{ needs.check-changesets.outputs.any_changed == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 9
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Build
        run: pnpm run build

      - name: Tests
        run: pnpm run test

      - name: Setup Git User
        shell: bash
        # This sets the git user to the author of the last commit
        run: |
          git config --global user.name "$(git --no-pager log --format=format:'%an' -n 1)"
          git config --global user.email "$(git --no-pager log --format=format:'%ae' -n 1)"

      - name: Creating .npmrc
        run: |
          cat << EOF > "$HOME/.npmrc"
            //registry.npmjs.org/:_authToken=$NPM_TOKEN
          EOF
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      # To open a beta release, you must first run the pnpm run enter:beta command.
      # Conversely, in order to close the beta release and launch the official release, the pnpm run exit:beta command must be used first.
      - name: Create Release Pull Request or Publish to NPM
        id: changesets
        if: ${{ needs.check-changesets.outputs.mode == 'pre' }}
        uses: changesets/action@v1
        with:
          # this expects you to have a npm script called version that runs some logic and then calls `changeset version`.
          version: pnpm run version
          # This expects you to have a script called release which does a build for your packages and calls changeset publish
          publish: pnpm run release
          title: 'ci(changesets): :package: version packages'
          commit: 'ci(changesets): version packages'
          setupGitUser: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      # This must be done before closing a release.
      - name: Preparation for npm publishing the official release
        if: ${{ needs.check-changesets.outputs.mode == 'exit' }}
        run: |
          pnpm run version
          find .changeset -type f -name "*.md" ! -name "README.md" -exec rm -f {} +
          git add .changeset/ -u
          git commit -m "chore: ready to release"
          git push origin $(git branch --show-current)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  check-chromatic:
    runs-on: ubuntu-latest
    name: Check for changes in apps/storybook
    outputs:
      any_changed: ${{ steps.changed-files.outputs.any_changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: |
            apps/storybook/**

  chromatic-publish:
    name: Run visual tests
    needs: [check-chromatic]
    if: ${{ needs.check-chromatic.outputs.any_changed == 'true' }}
    uses: ./.github/workflows/chromatic.yml
    secrets: inherit

  slack-notification:
    runs-on: ubuntu-latest
    needs: [check-changesets]
    if: ${{ needs.check-changesets.outputs.mode == 'pre' && needs.check-changesets.outputs.diff == 'true' && needs.check-changesets.outputs.length > 0 }}
    name: Notify slack that the release is complete
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44

      - name: Get PR infomation
        uses: actions/github-script@v6
        id: get_pr_info
        with:
          script: |
            return (
              await github.rest.repos.listPullRequestsAssociatedWithCommit({
                commit_sha: context.sha,
                owner: context.repo.owner,
                repo: context.repo.repo,
              })
            ).data[0];

      - name: Get changed packages
        id: get_changed_packages
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          CHANGED_PACKAGES=""
          for FILE in ${ALL_CHANGED_FILES}; do
            if [[ $FILE == packages/*/CHANGELOG.md ]]; then
              PACKAGE=$FILE
              VERSION=$(grep '^## ' "$PACKAGE" | head -n 1 | sed -E 's/^## (.*)$/\1/')
              echo "PACKAGE: $PACKAGE"
              echo "VERSION: $VERSION"
              CHANGED_PACKAGES="$CHANGED_PACKAGES|$PACKAGE $VERSION"
            fi
          done
          CHANGED_PACKAGES=$(echo $CHANGED_PACKAGES | sed 's/^|//')  # Remove leading delimiter
          echo "changed_packages=$CHANGED_PACKAGES" >> $GITHUB_OUTPUT
          echo "changed_packages=$CHANGED_PACKAGES"

      - name: Prepare Slack message
        id: prepare_slack_message
        run: |
          IFS='|' read -r -a PACKAGES_ARRAY <<< "${{ steps.get_changed_packages.outputs.changed_packages }}"
          BRANCH=${GITHUB_REF#refs/heads/}
          SLACK_MESSAGE=""
          for PACKAGE_INFO in "${PACKAGES_ARRAY[@]}"; do
            PACKAGE_CHANGELOG_PATH=$(echo $PACKAGE_INFO | awk '{print $1}')
            PACKAGE_NAME=$(echo $PACKAGE_CHANGELOG_PATH | sed 's|/CHANGELOG.md||')
            PACKAGE_VERSION=$(echo $PACKAGE_INFO | awk '{print $2}')
            CHANGELOG_URL="https://github.com/gganbu-org/gganbu-ui/blob/$BRANCH/$PACKAGE_CHANGELOG_PATH"
            SLACK_MESSAGE="$SLACK_MESSAGE\n• <$CHANGELOG_URL|$PACKAGE_NAME>: \`v$PACKAGE_VERSION\`"
          done
          echo "slack_message=$SLACK_MESSAGE" >> $GITHUB_OUTPUT
          echo "slack_message=$SLACK_MESSAGE"

      - name: Post to a Slack channel
        id: slack
        uses: slackapi/slack-github-action@v1.26.0
        with:
          # Unlike the step posting a new message, this step does not accept a channel name.
          # Please use a channel ID, not a name here.
          channel-id: 'C076U73UDFH'
          payload: |
            {
              "text": "@gganbu-org/gganbu-ui 사전 릴리즈 알림: ${{ github.sha }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "🚀🚀 *@gganbu-org/gganbu-ui 사전 릴리즈 준비 완료* 🚀🚀\n"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "<https://github.com/gganbu-org/gganbu-ui/pull/${{ fromJson(steps.get_pr_info.outputs.result).number }}|${{fromJson(steps.get_pr_info.outputs.result).title}}#${{fromJson(steps.get_pr_info.outputs.result).number}}>\n"
                  }
                },
                {
                  "type": "divider"
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "📦 배포된 패키지 목록 (버전 클릭시 릴리즈 노트로 이동합니다)\n"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ steps.prepare_slack_message.outputs.slack_message }}"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
